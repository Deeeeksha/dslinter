<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>not sure on DSLinter - Linter for Machine Learnig Application - Specific Code Smells</title>
    <link>https://hynn01.github.io/dslinter/tags/not-sure/</link>
    <description>Recent content in not sure on DSLinter - Linter for Machine Learnig Application - Specific Code Smells</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://hynn01.github.io/dslinter/tags/not-sure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Regular Expression Solution Not Optimal</title>
      <link>https://hynn01.github.io/dslinter/code-smells/regular-expression-solution-not-optimal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hynn01.github.io/dslinter/code-smells/regular-expression-solution-not-optimal/</guid>
      <description>Description \ref{grey:so_regx} provides a better coding solution for the regular expression, which might be able to apply to the Nature Language Processing (NLP) preprocessing process. NLP tasks are data-intensive and often take a long time to clean the data, so it would be good to save some time when preprocessing the data. The posts noted that \textit{regex.sub()} and \textit{str.translate()} work faster than \textit{str.replace()} in practice in Pandas library. The more efficient solution is worth considering.</description>
    </item>
    
    <item>
      <title>Backend Engine Mischoosed</title>
      <link>https://hynn01.github.io/dslinter/code-smells/backend-engine-mischoosed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hynn01.github.io/dslinter/code-smells/backend-engine-mischoosed/</guid>
      <description>Description When using pd.eval() in Pandas library, the numexpr is optimized for performance and python options offer no performance benefit over numexpr. Generally, it is not recommended to set the parameter to python. The developers should be careful when explicitly set this parameter.
Type API Specific
Existing Stage Data Preparation
Effect Efficiency
Example # Violated Code # Recommended Fix Source: Paper Grey Literature GitHub Commit Stack Overflow  https://stackoverflow.com/questions/53779986/dynamically-evaluate-an-expression-from-a-formula-in-pandas/53779987#53779987  Documentation </description>
    </item>
    
    <item>
      <title>Matrix Multiplication API Misused</title>
      <link>https://hynn01.github.io/dslinter/code-smells/matrix-multiplication-api-misused/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hynn01.github.io/dslinter/code-smells/matrix-multiplication-api-misused/</guid>
      <description>Description \textit{np.matmul()} in Numpy library is more readable than \textit{np.dot()} in the semantic way. While \textit{np.dot()} provides heterogeneous behaviors depending on the shape of the data, \textit{np.matmul()} behaves in a consistent way. When the multiply operation is performed on two-dimension matrixes, two APIs give a same result. However, \textit{np.matmul()} is preferred than \textit{np.dot()} for its clear semantic.
Type API Specific
Existing Stage Model Training
Effect Readability
Example ### NumPy import numpy as np a = [[1, 0], [0, 1]] b = [[4, 1], [2, 2]] # Violated Code np.</description>
    </item>
    
  </channel>
</rss>
